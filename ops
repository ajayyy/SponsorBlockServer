{"version":1,"ops":[{"type":3,"author":{"id":"6e1c4dc6752162bebe2c7f25376cf1fcc5a8aca8"},"timestamp":1595898888,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY2NDcxODkzMw==","github-url":"https://github.com/ajayyy/SponsorBlockServer/issues/109#issuecomment-664718933"},"message":"I think there's something here if combined with the youtube api to get publish time. Not using it as a source of truth but purely as a cacheing system for old videos unlikely to get new submissions\n - If video is more than x days old, allow cacheing (or assume allow on failure to get publish time)\n - If video has no submissions create an eternal entry saying so (invalidated on submission)\n - If video has got submissions, create a timed entry (to reduce cache storage due the fact we wont be getting repeated 404 requests from users)\n\nThis would help with the continued request for submissions on 404, only querying the database if somebody has actually interacted with the video.\n\nThis would still allow people to download the database and access all information, but ease the sqlite bottleneck (with the cache values being more malleable than what cloud flare provides.","files":null},{"type":6,"author":{"id":"6e1c4dc6752162bebe2c7f25376cf1fcc5a8aca8"},"timestamp":1595898888,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6Mzg4Nzk1MzQ3"},"target":"edb0f9877654d6386dc70658c6ba8754b97cfb57d19a58a900774868129f5afb","message":"I think there's something here if combined with the youtube api to get publish time. Not using it as a source of truth but purely as a cacheing system for old videos unlikely to get new submissions\n - If video is more than x days old, allow cacheing (or maybe not if invalidation of cache results is deemed reliable)\n - If video has no submissions create an eternal (or long) entry saying so (invalidated on submission)\n - If video has got submissions, create a timed entry (to reduce cache storage due the fact we wont be getting repeated 404 requests from users)\n\nThis would help with the continued request for submissions on 404, only querying the database if somebody has actually interacted with the video.\n\nThis would still allow people to download the database and access all information, but ease the sqlite bottleneck (with the cache values being more malleable than what cloud flare provides.","files":null},{"type":6,"author":{"id":"6e1c4dc6752162bebe2c7f25376cf1fcc5a8aca8"},"timestamp":1595899763,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6Mzg4Nzk3NDYy"},"target":"edb0f9877654d6386dc70658c6ba8754b97cfb57d19a58a900774868129f5afb","message":"I think there's something here if combined with the youtube api to get publish time. Not using it as a source of truth but purely as a cacheing system for old videos unlikely to get new submissions\n - If video has no submissions create an eternal (or long) entry saying so (invalidated on submission)\n - If video has got submissions, create a timed entry (to reduce cache storage due the fact we wont be getting repeated 404 requests from users)\n - If video is more than x days old, allow cacheing (proper invalidation negates this though)\n\nThis would help with the continued request for submissions on 404, only querying the database if somebody has actually interacted with the video.\n\nThis would still allow people to download the database and access all information, but ease the sqlite bottleneck (with the cache values being more malleable than what cloud flare provides.","files":null},{"type":6,"author":{"id":"6e1c4dc6752162bebe2c7f25376cf1fcc5a8aca8"},"timestamp":1595901229,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6Mzg4ODAxMzIx"},"target":"edb0f9877654d6386dc70658c6ba8754b97cfb57d19a58a900774868129f5afb","message":"I think there's something here (maybe could be combined with the youtube api to get publish time). Not using it as a source of truth but purely as a cacheing system for old videos unlikely to get new submissions\n - If video has no submissions create an eternal (or long) entry saying so (invalidated on submission)\n - If video has got submissions, create a timed entry (to reduce cache storage due the fact we wont be getting repeated 404 requests from users)\n - If video is more than x days old, allow cacheing (proper invalidation negates this though)\n\nThis would help with the continued request for submissions on 404, only querying the database if somebody has actually interacted with the video.\n\nThis would still allow people to download the database and access all information, but ease the sqlite bottleneck (with the cache values being more malleable than what cloud flare provides.","files":null},{"type":6,"author":{"id":"6e1c4dc6752162bebe2c7f25376cf1fcc5a8aca8"},"timestamp":1595901333,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6Mzg4ODAxNTIy"},"target":"edb0f9877654d6386dc70658c6ba8754b97cfb57d19a58a900774868129f5afb","message":"I think there's something here (maybe could be combined with the youtube api to get publish time). \n\nre: https://github.com/ajayyy/SponsorBlock/issues/102#issuecomment-520630058 \nNot using it as a source of truth but purely as a cacheing system for old videos unlikely to get new submissions\n\n\n - If video has no submissions create an eternal (or long) entry saying so (invalidated on submission)\n - If video has got submissions, create a timed entry (to reduce cache storage due the fact we wont be getting repeated 404 requests from users)\n - If video is more than x days old, allow cacheing (proper invalidation negates this though)\n\nThis would help with the continued request for submissions on 404, only querying the database if somebody has actually interacted with the video.\n\nThis would still allow people to download the database and access all information, but ease the sqlite bottleneck (with the cache values being more malleable than what cloud flare provides.","files":null},{"type":6,"author":{"id":"6e1c4dc6752162bebe2c7f25376cf1fcc5a8aca8"},"timestamp":1595902552,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6Mzg4ODA0NjU5"},"target":"edb0f9877654d6386dc70658c6ba8754b97cfb57d19a58a900774868129f5afb","message":"I think there's something here (maybe could be combined with the youtube api to get publish time). \n\nre: https://github.com/ajayyy/SponsorBlock/issues/102#issuecomment-520630058 \nNot using it as a source of truth but purely as a cacheing system for old videos unlikely to get new submissions\n\n\n - If video has no submissions create an entry saying so (invalidated on submission / timer (/ considerations around downvotes))\n - If video has got submissions, create a timed entry (to reduce cache storage due the fact we wont be getting repeated 404 requests from users)\n - If video is more than x days old, allow cacheing (proper invalidation negates this though)\n\nThis would help with the continued request for submissions on 404, only querying the database if somebody has actually interacted with the video.\n\nThis would still allow people to download the database and access all information, but ease the sqlite bottleneck (with the cache values being more malleable than what cloud flare provides.","files":null},{"type":3,"author":{"id":"3708d7e99c169a5d462136cbf424bcd078c353be"},"timestamp":1595899483,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY2NDcyMjAyNw==","github-url":"https://github.com/ajayyy/SponsorBlockServer/issues/109#issuecomment-664722027"},"message":"Those are good ideas. This issue was about caching the `db.prepare(\"query\")` statements. Example:\n\n```\nlet getSegments = db.prepare(\"query\");\n\n\n//...\n\nfunction skipSegments() {\n    let segments = getSegments.get(videoID);\n\n//...\n```\n\nIt'll be a little different now that there is the mysql support and the queries are a little different. I've just read that apparently compiling prepare statements can take a bit of time.","files":null},{"type":3,"author":{"id":"6e1c4dc6752162bebe2c7f25376cf1fcc5a8aca8"},"timestamp":1595900286,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY2NDcyMzYyOQ==","github-url":"https://github.com/ajayyy/SponsorBlockServer/issues/109#issuecomment-664723629"},"message":"I was thinking stick it when the request is received - so cache the user response with a key of category list and video id","files":null},{"type":6,"author":{"id":"6e1c4dc6752162bebe2c7f25376cf1fcc5a8aca8"},"timestamp":1595900286,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6Mzg4Nzk4ODYz"},"target":"36ec9660b6a46d8e4b11c8d5d1567900010a4bbfa89332405c562d923ed4c4fd","message":"I was thinking stick it when the request is returned - so cache the user response with a key of category list and video id.\nThat way cache control can be implemented and tied to use actions:\n\nFlow for 404 retrys:\nUser requests an old video with no views - cache the fact there's nothing there (multiple entries for each category requested).\nThe next time a user request's that video we don't bother checking the database as it's been proven no segments exist (as long as **all** requested categories are cached). \nIf a user then submits a segment for that video, first remove the cache entry for that category/videoid, then update the database with the value.\nThe next time a user request's that video we don't bother checking the database as it's been proven no segments exist (as long as **all** requested categories are cached).","files":null},{"type":6,"author":{"id":"6e1c4dc6752162bebe2c7f25376cf1fcc5a8aca8"},"timestamp":1595900858,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6Mzg4ODAwMzkz"},"target":"36ec9660b6a46d8e4b11c8d5d1567900010a4bbfa89332405c562d923ed4c4fd","message":"I was thinking stick checking values when a request is made, writing values when a request is returned - so cache the user response with a key of category list and video id.\nThat way cache control can be implemented and tied to use actions:\n\nUser requests an old video with no views - cache the fact there's nothing to return (one entry for **all** categories requested + videoID).\nThe next time a user request's that video we don't bother checking the database as it's been proven no segments exist (as long as **all** requested categories + videoID are common and cached) and return the cache value. \nIf a user then submits a segment for that video, first remove **all** the cache entries for that videoID (no matter the associated categories), then update the database with the submission.\nThe next time a user request's that video if we don't see a cache entry for **all** requested categories + videoID, we check the database and update the cache.\nIf we do see a cache entry for **all** requested categories + videoID, we return the cache value.","files":null}]}